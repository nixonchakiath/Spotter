<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentCouldNotBeDefault" xml:space="preserve">
    <value>Argument could not be equal to its default value.</value>
  </data>
  <data name="ArgumentCouldNotBeRemoved" xml:space="preserve">
    <value>Passed entity could not be removed.</value>
  </data>
  <data name="ArgumentCouldNotBeUpdated" xml:space="preserve">
    <value>Passed entity could not be added or updated.</value>
  </data>
  <data name="DbContextNull" xml:space="preserve">
    <value>Db Context cannot be null</value>
  </data>
  <data name="DbEntityValidationException" xml:space="preserve">
    <value>Validation failed for one or more entities.</value>
  </data>
  <data name="EntityExceptionOccured" xml:space="preserve">
    <value>An entity framework data access operation could not be executed. Please see the inner exception for additional information</value>
  </data>
  <data name="EntityKeyTypeMismatch" xml:space="preserve">
    <value>Provided key of type '{0}' is not assignable to the expected entity key of type '{1}' with name '{2} '</value>
  </data>
  <data name="EntityNotSupportedByRepository" xml:space="preserve">
    <value>Entity of type '{0}' is not supported by the repository</value>
  </data>
  <data name="EntitySetCouldNotBeFound" xml:space="preserve">
    <value>The entity set '{0}' could not be found in container '{1}'</value>
  </data>
  <data name="ExceptionCanNotBeSwallowed" xml:space="preserve">
    <value>Exception can not be swallowed</value>
  </data>
  <data name="MissingCompositeKeyProperties" xml:space="preserve">
    <value>The provided composite key of type '{0}' does not provide any of the expected properties:  '{1}'. The problem occurs because the properties of the composite key object does not match to the key properties defined in EntitySet '{2}'</value>
  </data>
  <data name="MissingElementType" xml:space="preserve">
    <value>Entity set '{0}' without specified element type is not supported</value>
  </data>
  <data name="MissingKeysForElementType" xml:space="preserve">
    <value>Entity set '{0}' has an invalid element type becaue the element type does not have any keys specified</value>
  </data>
  <data name="MissingPredicate" xml:space="preserve">
    <value>Predicate not provided in specification. </value>
  </data>
  <data name="MissingSomeOfTheCompositeKeyProperties" xml:space="preserve">
    <value>The provided composite key of type '{0}' does not provide some of the expected properties:  '{1}' defined in EntitySet '{2}'</value>
  </data>
  <data name="ObjectDoesNotLongerExists" xml:space="preserve">
    <value>The object of type '{0}' does not longer exists.</value>
  </data>
  <data name="OptimisticConcurencyException" xml:space="preserve">
    <value>An entity was modified or deleted in the meantime by an other transaction</value>
  </data>
  <data name="UpdateMethodNotSupported" xml:space="preserve">
    <value>EFRepository  update method is not supported for type  '{0}'. Update method is supported only for types that derive from EntityObject</value>
  </data>
</root>